name: Tests

on:
  push:
    branches:
    - '**'
  pull_request:
    branches:
    - master

jobs:
  # Dockerfile tests
  docker-build-test:
    runs-on: ubuntu-latest
    name: Build docker image

    steps:
    - uses: actions/checkout@v2
    - run: make docker-build

  docker-lint:
    runs-on: ubuntu-latest
    name: 'dockerfile: lint'
    steps: 
    - uses: actions/checkout@v2
    - run: make docker-lint

  # Golang tests
  go-lint:
    runs-on: ubuntu-latest
    name: 'golang: lint'
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make go-lint

  go-dependencies:
    runs-on: ubuntu-latest
    name: Dependencies are up to date
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make dependencies-test

  check-generated-go-files:
    runs-on: ubuntu-latest
    name: Generated files are up to date
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make generate
    - name: Check diff
      run: |
        git restore -- vendor go.mod go.sum
        git diff-index --exit-code --ignore-cr-at-eol HEAD

  go-tests:
    runs-on: ubuntu-latest
    name: K8S v${{ matrix.k8sVersion }} (CM v${{ matrix.certManager }})

    strategy:
      fail-fast: false
      matrix:
        # https://github.com/jetstack/cert-manager/tags
        certManager: ["0.12.0", "0.13.1", "0.14.2", "0.15.0-alpha.0"]
        # https://snapcraft.io/microk8s
        k8sVersion:
        - "1.16"
        - "1.17"
        # - "1.18" # TODO check why Registry and RegistryCtl controllers tests fail

    steps: 
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - name: Install Kubernetes v${{ matrix.k8sVersion }}
      run: |
        sudo snap install microk8s --channel='${{ matrix.k8sVersion }}/stable' --classic

        sudo microk8s.start

        # https://microk8s.io/docs/addons
        sudo microk8s.enable dns
    - name: Wait for Kubernetes to be ready
      timeout-minutes: 15
      run: |
        while [[ ! $(sudo microk8s.kubectl cluster-info) ]] ; do
          echo "kubernetes not ready yet..." >&2
          sleep 1
        done
    - name: Install CertManager v${{ matrix.certManager }}
      run: |
        # Try the recet way to install crd or fallback to the old one
        version='${{ matrix.certManager }}'
        shortVersion=""${version%.*}""
        sudo microk8s.kubectl apply -f "https://github.com/jetstack/cert-manager/releases/download/v${version}/cert-manager.crds.yaml" ||
        sudo microk8s.kubectl apply -f "https://raw.githubusercontent.com/jetstack/cert-manager/release-${shortVersion}/deploy/manifests/00-crds.yaml"
    - uses: actions/checkout@v2
    - name: go tests
      run: |
        export KUBECONFIG="$(realpath "$(mktemp kubeconfig.XXXXX)")"
        export USE_EXISTING_CLUSTER="true"

        sudo microk8s.config > "${KUBECONFIG}"

        make test

  # Kubernetes
  crd-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/crd'
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make manifests
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/crd'
        kubectl-version: 'latest'

  operator-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/default'
    steps: 
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make manifests
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/default'
        kubectl-version: 'latest'

  samples-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/samples'
    steps: 
    - uses: actions/checkout@v2
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/samples'
        kubectl-version: 'latest'

  # Documentation
  md-lint:
    runs-on: ubuntu-latest
    name: 'documentation: lint'
    steps:
    - uses: actions/checkout@v2
    - run: make md-lint
