name: Tests

on:
  push:
    branches:
    - '**'
  pull_request:
    branches:
    - master
    - release-*
    - develop

jobs:
  # Dockerfile tests
  docker-build-test:
    runs-on: ubuntu-latest
    name: Build docker image

    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make docker-build

  docker-lint:
    runs-on: ubuntu-latest
    name: 'dockerfile: lint'
    steps:
    - uses: actions/checkout@v2
    - run: make docker-lint

  # Golang tests
  go-lint:
    runs-on: ubuntu-latest
    name: 'golang: lint'
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make go-lint

  go-dependencies:
    runs-on: ubuntu-latest
    name: Dependencies are up to date
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make go-dependencies-test

  check-generated-files:
    runs-on: ubuntu-latest
    name: Generated files are up to date
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make generated-diff-test

  go-tests:
    runs-on: ubuntu-latest
    name: Go tests
    env:
      USE_EXISTING_CLUSTER: true
      dockerImage: harbor-operator:dev_test
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: 1.14

      - name: Install Kubernetes
        uses: helm/kind-action@v1.1.0
        with:
          version: v0.9.0
          cluster_name: harbor
          config: .github/kind.yaml

      - name: Install CertManager
        run: |
          # Try the recet way to install crd or fallback to the old one
          kubectl apply -f "https://github.com/jetstack/cert-manager/releases/download/v0.16.1/cert-manager.yaml"
          sleep 5
          time kubectl -n cert-manager wait --for=condition=Available deployment --all --timeout 300s

      - name: go tests
        run: |
          make go-test

  harbor-tests:
    runs-on: ubuntu-latest
    name: K8S v${{ matrix.k8sVersion }} (CM v${{ matrix.certManager }})
    env:
      USE_EXISTING_CLUSTER: true
      operatorNamespace: harbor-operator-ns
      dockerImage: harbor-operator:dev_test

    strategy:
      fail-fast: false
      matrix:
        # https://github.com/jetstack/cert-manager/tags
        certManager:
        - "0.16.1"
        - "1.1.0"

        # https://snapcraft.io/microk8s
        k8sVersion:
        - "1.18.8"
        - "1.19.1"
        - "1.20.2"

        ingress:
        - "0.35.0"

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-go@v2
      with:
        go-version: 1.14

    - name: Install Kubernetes v${{ matrix.k8sVersion }}
      uses: helm/kind-action@v1.1.0
      with:
        version: v0.9.0
        node_image: kindest/node:v${{ matrix.k8sVersion }}
        cluster_name: harbor
        config: .github/kind.yaml

    - name: Install CertManager v${{ matrix.certManager }}
      run: |
        kubectl apply -f "https://github.com/jetstack/cert-manager/releases/download/v${{ matrix.certManager }}/cert-manager.yaml"
        sleep 5
        time kubectl -n cert-manager wait --for=condition=Available deployment --all --timeout 300s

    - name: Install Ingress
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v${{ matrix.ingress }}/deploy/static/provider/kind/deploy.yaml
        time kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s

    - name: build harbor-operator
      run: |
        make manifests docker-build IMG=${dockerImage}
        kind load docker-image ${dockerImage} --name harbor

    - name: install harbor-operator
      run: |
        cd manifests/cluster
        kustomize edit add secret github-token --disableNameSuffixHash --from-literal=GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
        kustomize edit add patch --path patch/github-token.yaml
        kustomize edit set image goharbor/harbor-operator=${dockerImage}
        kustomize build | kubectl apply -f -

        # make helm-install IMG=${dockerImage}

        if ! time kubectl -n ${operatorNamespace} wait --for=condition=Available deployment --all --timeout 300s; then
          kubectl get all -n ${operatorNamespace}
          exit 1
        fi

    - name: install harbor
      run: |
        set -ex
        IP=`hostname -I | awk '{print $1}'`
        echo "IP=$IP" >> $GITHUB_ENV
        CORE_HOST=core.$IP.nip.io
        NOTARY_HOST=notary.$IP.nip.io
        echo "CORE_HOST=$CORE_HOST" >> $GITHUB_ENV
        echo "NOTARY_HOST=$NOTARY_HOST" >> $GITHUB_ENV
        sed -i "s/core.harbor.domain/$CORE_HOST/g" manifests/samples/full_stack_other_fs.yaml
        sed -i "s/notary.harbor.domain/$NOTARY_HOST/g" manifests/samples/full_stack_other_fs.yaml
        sed -i "s/logLevel: info/logLevel: debug/g" manifests/samples/full_stack_other_fs.yaml

        kubectl apply -f manifests/samples/full_stack_other_fs.yaml
        for i in $(seq 1 7);do
          sleep 30
          echo $i
          kubectl -n cluster-sample-ns get all
        done
        if ! time kubectl -n cluster-sample-ns wait --for=condition=Ready pod --all --timeout 600s && ! time kubectl -n cluster-sample-ns wait --for=condition=Ready pod --all --timeout 60s; then
          echo install harbor failed
          kubectl get all -n cluster-sample-ns

          for n in $(kubectl -n cluster-sample-ns get po |grep -v Running|grep -v NAME|awk '{print $1}');do
            echo describe $n
            kubectl -n cluster-sample-ns describe pod $n
            echo show log $n
            kubectl -n cluster-sample-ns logs --tail 100 $n || true
          done
          kubectl logs -l control-plane=harbor-operator -n ${operatorNamespace} --tail 100
          exit 1
        else
          kubectl -n cluster-sample-ns get all
          kubectl get harbor -n cluster-sample-ns -o wide
          kubectl get harborcluster -n cluster-sample-ns -o wide
        fi
        free -h

    - name: test harbor
      run: |
        set -ex
        curl https://$CORE_HOST/api/v2.0/systeminfo -i -k -f
        sudo mkdir -p /etc/docker/certs.d/$CORE_HOST
        kubectl -n cluster-sample-ns get secret sample-public-certificate -o jsonpath='{.data.ca\.crt}' \
          | base64 --decode \
          | sudo tee /etc/docker/certs.d/$CORE_HOST/harbor_ca.crt
        # docker login, create image, docker push, docker pull
        docker login $CORE_HOST -u admin -p Harbor12345 || (kubectl -n cluster-sample-ns get po;kubectl -n cluster-sample-ns logs -l goharbor.io/operator-controller=core;exit 1)
        docker run busybox dd if=/dev/urandom of=test count=10 bs=1MB
        DOCKERID=`docker ps -l -q`
        docker commit $DOCKERID $CORE_HOST/library/busybox:test
        docker push $CORE_HOST/library/busybox:test
        docker pull $CORE_HOST/library/busybox:test

    - name: apidb test
      run: |
        git clone https://github.com/goharbor/harbor -b v2.1.2
        kubectl -n cluster-sample-ns patch deploy harborcluster-sample-harbor-harbor-core -p '{"spec":{"template":{"spec":{"containers":[{"name":"core","env":[{"name":"GC_TIME_WINDOW_HOURS","value":"0"}]}]}}}}'
        sleep 5
        kubectl -n cluster-sample-ns wait --for=condition=Ready pod --all --timeout 600s
        docker run --rm -t --privileged -v `pwd`/harbor:/drone -v /etc/docker/certs.d/$CORE_HOST/:/ca -v /etc/docker/certs.d/$CORE_HOST/:/root/.docker/tls/$NOTARY_HOST/ -e NOTARY_URL=https://$NOTARY_HOST -w /drone goharbor/harbor-e2e-engine:2.6 \
          python -u -m robot --exclude gc -v DOCKER_USER:${{ secrets.DOCKER_USER }} -v DOCKER_PWD:${{ secrets.DOCKER_TOKEN }} -v ip:$CORE_HOST -v ip1: -v HARBOR_PASSWORD:Harbor12345 -X \
          /drone/tests/robot-cases/Group1-Nightly/Setup.robot /drone/tests/robot-cases/Group0-BAT/API_DB.robot

    - name: fetch harbor logs
      if: ${{ failure() }}
      run: |
        mkdir -p /tmp/harbor
        for name in core jobservice registry registryctl trivy chartmuseum notaryserver notarysigner portal; do \
          kubectl -n cluster-sample-ns logs -l "goharbor.io/operator-controller=$name" --all-containers > /tmp/harbor/$name.log ; \
        done
        kubectl -n cluster-sample-ns logs -l "application=spilo" --all-containers > /tmp/harbor/db.log
        kubectl -n cluster-sample-ns logs -l "app.kubernetes.io/component=redis" > /tmp/harbor/redis.log

    - uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: harbor
        path: /tmp/harbor

    - name: fetch logs
      if: ${{ failure() }}
      run: |
        mkdir  -p /tmp/logs
        kind export logs --name harbor /tmp/logs

    - uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: kind
        path: /tmp/logs

    - name: Get logs for debug
      if: ${{ failure() }}
      run: |
        set -x
        kubectl get all -n "${operatorNamespace}" -o wide
        kubectl logs -n "${operatorNamespace}" -l 'control-plane=harbor-operator' --all-containers --tail=1000

  # Kubernetes
  crd-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/crd'
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make manifests
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/crd'
        kubectl-version: 'latest'

  operator-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/rbac'
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make manifests
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/rbac'
        kubectl-version: 'latest'

  samples-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/samples'
    steps:
    - uses: actions/checkout@v2
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/samples'
        kubectl-version: 'latest'

  kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/${{ matrix.path }}'

    strategy:
      fail-fast: false
      matrix:
        # https://github.com/jetstack/cert-manager/tags
        path:
        - samples/harbor
        - samples/harbor-full
    steps:
    - uses: actions/checkout@v2
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/${{ matrix.path }}'
        kubectl-version: 'latest'

  # Documentation
  md-lint:
    runs-on: ubuntu-latest
    name: 'documentation: lint'
    steps:
    - uses: actions/checkout@v2
    - run: make md-lint
