name: Tests

on:
  push:
    branches:
    - '**'
  pull_request:
    branches:
    - master
    - release-*

jobs:
  # Dockerfile tests
  docker-build-test:
    runs-on: ubuntu-latest
    name: Build docker image

    steps:
    - uses: actions/checkout@v2
    - run: make docker-build

  docker-lint:
    runs-on: ubuntu-latest
    name: 'dockerfile: lint'
    steps: 
    - uses: actions/checkout@v2
    - run: make docker-lint

  # Golang tests
  go-lint:
    runs-on: ubuntu-latest
    name: 'golang: lint'
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make go-lint

  go-dependencies:
    runs-on: ubuntu-latest
    name: Dependencies are up to date
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make go-dependencies-test

  check-generated-files:
    runs-on: ubuntu-latest
    name: Generated files are up to date
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make generated-diff-test

  go-tests:
    runs-on: ubuntu-latest
    name: K8S v${{ matrix.k8sVersion }} (CM v${{ matrix.certManager }})
    env:
      USE_EXISTING_CLUSTER: true

    strategy:
      fail-fast: false
      matrix:
        # https://github.com/jetstack/cert-manager/tags
        certManager:
        - "0.15.2"
        - "0.16.1"
        - "1.0.3"

        # https://snapcraft.io/microk8s
        k8sVersion:
        - "1.17"
        - "1.18"
        - "1.19"

    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14

    - name: Install Kubernetes v${{ matrix.k8sVersion }}
      run: |
        which kind || (curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.7.0/kind-$(uname)-amd64; sudo install kind /usr/local/bin/)
        cat <<EOF | kind create cluster --name harbor --config=-
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
        - role: worker
        - role: worker
        EOF

    - name: Install CertManager v${{ matrix.certManager }}
      run: |
        # Try the recet way to install crd or fallback to the old one
        version='${{ matrix.certManager }}'
        kubectl apply -f "https://github.com/jetstack/cert-manager/releases/download/v${version}/cert-manager.yaml"
        sleep 5
        time kubectl -n cert-manager wait --for=condition=Available deployment --all --timeout 300s

    - name: Install Ingress
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.35.0/deploy/static/provider/baremetal/deploy.yaml
        sleep 5
        time kubectl -n ingress-nginx wait --for=condition=Available deployment --all --timeout 300s

    - uses: actions/checkout@v2
    - name: go tests
      run: |
        make go-test

    - name: build harbor-operator
      run: |
        make docker-build IMG=harbor-operator:dev_test
        kind load docker-image harbor-operator:dev_test --name harbor

    - name: install harbor-operator
      run: |
        set -ex
        kubectl create ns harbor-operator-ns
        cd config/default
        kustomize edit set image goharbor/harbor-operator=harbor-operator:dev_test
        kustomize build | kubectl apply -f -

        # make helm-install IMG=harbor-operator:dev_test

        if ! time kubectl -n harbor-operator-ns wait --for=condition=Available deployment --all --timeout 300s; then
          kubectl get all -n harbor-operator-ns
          exit 1
        fi

    - name: install harbor
      run: |
        export GITHUB_TOKEN=xxx
        set -ex
        make sample
        for i in $(seq 1 6);do
          sleep 30
          echo $i
          kubectl get all
        done
        if ! time kubectl wait --for=condition=Ready pod --all --timeout 600s ;then
          echo install harbor failed
          kubectl get all

          for n in $(kubectl get po |grep -v Running|grep -v NAME|awk '{print $1}');do
            echo describe $n
            kubectl describe pod $n
            echo show log $n
            kubectl log $n || true
          done
          exit 1
        else
          kubectl get all
        fi
        free -h

    - name: test harbor
      run: |
        set -ex
        sudo kubectl get -n ingress-nginx service/ingress-nginx-controller
        sudo kubectl port-forward -n ingress-nginx service/ingress-nginx-controller 443:443 80:80 --address=0.0.0.0 &
        sleep 10
        echo 127.0.0.1 core.harbor.domain | sudo tee -a /etc/hosts
        curl https://core.harbor.domain/api/v2.0/systeminfo -i -k
        sudo mkdir -p /etc/docker/certs.d/core.harbor.domain
        kubectl get secret sample-public-certificate -o jsonpath='{.data.ca\.crt}' \
          | base64 --decode \
          | sudo tee "/etc/docker/certs.d/core.harbor.domain/ca.crt"
        # docker login, create image, docker push, docker pull
        docker login core.harbor.domain -u admin -p Harbor12345
        docker run busybox dd if=/dev/urandom of=test count=10 bs=1MB
        DOCKERID=`docker ps -l -q`
        docker commit $DOCKERID core.harbor.domain/library/busybox:test
        docker push core.harbor.domain/library/busybox:test
        docker pull core.harbor.domain/library/busybox:test


  # Kubernetes
  crd-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/crd'
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make manifests
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/crd'
        kubectl-version: 'latest'

  operator-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/rbac'
    steps: 
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make manifests
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/rbac'
        kubectl-version: 'latest'

  samples-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/samples'
    steps: 
    - uses: actions/checkout@v2
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/samples'
        kubectl-version: 'latest'

  kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/${{ matrix.path }}'

    strategy:
      fail-fast: false
      matrix:
        # https://github.com/jetstack/cert-manager/tags
        path:
        - samples/chartmuseum
        - samples/core
        - samples/database
        - samples/harbor
        - samples/harbor-full
        - samples/jobservice
        - samples/notary
        - samples/notary-server
        - samples/notary-signer
        - samples/portal
        - samples/registry
        - samples/registryctl

    steps: 
    - uses: actions/checkout@v2
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/${{ matrix.path }}'
        kubectl-version: 'latest'

  # Documentation
  md-lint:
    runs-on: ubuntu-latest
    name: 'documentation: lint'
    steps:
    - uses: actions/checkout@v2
    - run: make md-lint

#  # Go Releaser
#  release:
#    runs-on: ubuntu-latest
#    name: 'release: snapshot'
#    steps:
#    - uses: actions/setup-go@v2
#      with:
#        go-version: 1.14
#    - uses: actions/checkout@v2
#    - name: Import GPG key
#      id: import_gpg
#      uses: crazy-max/ghaction-import-gpg@v3
#      with:
#        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
#        passphrase: ${{ secrets.GPG_PASSPHRASE }}
#    - run: make release-test
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
