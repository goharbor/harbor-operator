name: Tests

on:
  push:
    branches:
    - master

jobs:
  helm-tests:
    runs-on: ubuntu-latest
    name: K8S v${{ matrix.k8sVersion }} (CM v${{ matrix.certManager }})

    strategy:
      fail-fast: false
      matrix:
        # https://github.com/jetstack/cert-manager/tags
        certManager: ["0.12.0", "0.13.1", "0.14.2", "0.15.0-alpha.0"]
        # https://snapcraft.io/microk8s
        k8sVersion:
        - "1.16"
        - "1.17"
        # - "1.18" # TODO check why Registry and RegistryCtl controllers tests fail

    steps: 
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - name: Install Kubernetes v${{ matrix.k8sVersion }}
      run: |
        sudo snap install microk8s --channel='${{ matrix.k8sVersion }}/stable' --classic

        sudo microk8s.start

        # https://microk8s.io/docs/addons
        sudo microk8s.enable dns
    - name: Wait for Kubernetes to be ready
      timeout-minutes: 15
      run: |
        while [[ ! $(sudo microk8s.kubectl cluster-info) ]] ; do
          echo "kubernetes not ready yet..." >&2
          sleep 1
        done
    - name: Install CertManager v${{ matrix.certManager }}
      run: |
        # Try the recet way to install crd or fallback to the old one
        version='${{ matrix.certManager }}'
        shortVersion=""${version%.*}""
        sudo microk8s.kubectl apply -f "https://github.com/jetstack/cert-manager/releases/download/v${version}/cert-manager.crds.yaml" ||
        sudo microk8s.kubectl apply -f "https://raw.githubusercontent.com/jetstack/cert-manager/release-${shortVersion}/deploy/manifests/00-crds.yaml"
    - uses: actions/checkout@v2
    - name: helm tests
      run: |
        export KUBECONFIG="$(realpath "$(mktemp kubeconfig.XXXXX)")"
        export USE_EXISTING_CLUSTER="true"

        sudo microk8s.config > "${KUBECONFIG}"

        make helm-test
