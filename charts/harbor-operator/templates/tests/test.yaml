# Code generated by make. DO NOT EDIT.
apiVersion: v1
data:
  init-db.sql: |
    CREATE DATABASE core WITH OWNER postgres;
    CREATE DATABASE clair WITH OWNER postgres;
    CREATE DATABASE notaryserver WITH OWNER postgres;
    CREATE DATABASE notarysigner WITH OWNER postgres;
kind: ConfigMap
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-harbor-init-db'
---
apiVersion: v1
data:
  secret: SGFyYm9yMTIzNDU=
kind: Secret
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-admin-core-secret-7274ck5bh5'
type: goharbor.io/single-secret
---
apiVersion: v1
data:
  secret: MTIzNDU2Nzg5MDEyMzQ1Ng==
kind: Secret
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-core-database-encryption-dddh7f9gfg'
type: goharbor.io/single-secret
---
apiVersion: v1
data:
  secret: dW5zZWN1cmUtY29yZS1zZWNyZXQ=
kind: Secret
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-core-secret-m77cc2b6k2'
type: goharbor.io/single-secret
---
apiVersion: v1
data:
  key: MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=
kind: Secret
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-csrf-key-dmb742k6m2'
type: goharbor.io/csrf
---
apiVersion: v1
data:
  postgresql-password: dGhlLWRhdGFiYXNlLXBhc3N3b3Jk
kind: Secret
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-harbor-database-password'
type: Opaque
---
apiVersion: v1
data:
  secret: dW5zZWN1cmUtam9ic2VydmljZS1zZWNyZXQ=
kind: Secret
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-jobservice-secret-ffkf2d298g'
type: goharbor.io/single-secret
---
apiVersion: v1
data:
  postgresql-password: dGhlLWRhdGFiYXNlLXBhc3N3b3Jk
kind: Secret
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  name: '{{ include "chart.fullname" . }}-test-postgresql'
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    app.kubernetes.io/instance: harbor-operator-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.3.3
  name: '{{ include "chart.fullname" . }}-harbor-operator-test-postgresql'
spec:
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: harbor-operator-test
    app.kubernetes.io/name: postgresql
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    app.kubernetes.io/instance: harbor-operator-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.3.3
  name: '{{ include "chart.fullname" . }}-harbor-operator-test-postgresql-headless'
spec:
  clusterIP: None
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: harbor-operator-test
    app.kubernetes.io/name: postgresql
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    app.kubernetes.io/instance: harbor-operator-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.3.3
  name: '{{ include "chart.fullname" . }}-harbor-operator-test-postgresql'
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: harbor-operator-test
      app.kubernetes.io/name: postgresql
      role: master
  serviceName: '{{ include "chart.fullname" . }}-harbor-operator-test-postgresql-headless'
  template:
    metadata:
      annotations:
        app.kubernetes.io/instance: ""
        app.kubernetes.io/managed-by: ""
        helm.sh/chart: ""
        helm.sh/hook: test
      labels:
        app.kubernetes.io/instance: harbor-operator-test
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-9.3.3
        role: master
      name: harbor-operator-test-postgresql
    spec:
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: /bitnami/postgresql
        - name: PGDATA
          value: /bitnami/postgresql/data
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresql-password
              name: '{{ include "chart.fullname" . }}-test-postgresql'
        - name: POSTGRESQL_ENABLE_LDAP
          value: "no"
        - name: POSTGRESQL_ENABLE_TLS
          value: "no"
        image: docker.io/bitnami/postgresql:11.9.0-debian-10-r1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: harbor-operator-test-postgresql
        ports:
        - containerPort: 5432
          name: tcp-postgresql
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /docker-entrypoint-initdb.d/
          name: custom-init-scripts
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /bitnami/postgresql
          name: data
          subPath: null
      securityContext:
        fsGroup: 1001
      volumes:
      - configMap:
          name: '{{ include "chart.fullname" . }}-harbor-init-db'
        name: custom-init-scripts
      - emptyDir:
          medium: Memory
          sizeLimit: 1Gi
        name: dshm
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-harbor-ca'
spec:
  commonName: harbor-sample
  isCA: true
  issuerRef:
    name: '{{ include "chart.fullname" . }}-harbor-sample'
  secretName: harbor-sample-ca
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-sample-public-certificate'
spec:
  dnsNames:
  - core.harbor.domain
  isCA: false
  issuerRef:
    name: '{{ include "chart.fullname" . }}-sample-public-certificate'
  secretName: sample-public-certificate
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-harbor-sample'
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-sample-public-certificate'
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-service-token'
spec:
  selfSigned: {}
---
apiVersion: goharbor.io/v1alpha2
kind: Harbor
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    goharbor.io/harbor-class: test
    sample: "true"
  name: '{{ include "chart.fullname" . }}-sample'
spec:
  core:
    tokenIssuer:
      kind: Issuer
      name: '{{ include "chart.fullname" . }}-service-token'
  database:
    hosts:
    - host: harbor-database-postgresql
      port: 5432
    passwordRef: '{{ include "chart.fullname" . }}-harbor-database-password'
    sslMode: disable
    username: postgres
  encryptionKeyRef: '{{ include "chart.fullname" . }}-core-database-encryption-dddh7f9gfg'
  expose:
    core:
      ingress:
        host: core.harbor.domain
      tls:
        certificateRef: sample-public-certificate
    notary:
      ingress:
        host: notary.harbor.domain
  externalURL: https://core.harbor.domain
  harborAdminPasswordRef: '{{ include "chart.fullname" . }}-admin-core-secret-7274ck5bh5'
  imageChartStorage:
    filesystem:
      chartPersistentVolume:
        claimName: '{{ include "chart.fullname" . }}-sample-harbor-chart'
      registryPersistentVolume:
        claimName: '{{ include "chart.fullname" . }}-sample-harbor-registry'
  internalTLS:
    enabled: true
  notary:
    migrationEnabled: true
  redis:
    host: harbor-redis-master
    passwordRef: harbor-redis
    port: 6379
  trivy:
    skipUpdate: false
  trivyStorage:
    cachePersistentVolume:
      claimName: '{{ include "chart.fullname" . }}-sample-harbor-trivy-cache'
    reportsPersistentVolume:
      claimName: '{{ include "chart.fullname" . }}-sample-harbor-trivy-reports'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-sample-harbor-chart'
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-sample-harbor-registry'
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-sample-harbor-trivy-cache'
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/instance: ""
    app.kubernetes.io/managed-by: ""
    helm.sh/chart: ""
    helm.sh/hook: test
  labels:
    sample: "true"
  name: '{{ include "chart.fullname" . }}-sample-harbor-trivy-reports'
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeMode: Filesystem
