// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Execution execution
//
// swagger:model Execution
type Execution struct {

	// The end time of execution
	EndTime string `json:"end_time,omitempty"`

	// extra attrs
	ExtraAttrs ExtraAttrs `json:"extra_attrs,omitempty"`

	// The ID of execution
	ID int64 `json:"id,omitempty"`

	// metrics
	Metrics *Metrics `json:"metrics,omitempty"`

	// The start time of execution
	StartTime string `json:"start_time,omitempty"`

	// The status of execution
	Status string `json:"status,omitempty"`

	// The status message of execution
	StatusMessage string `json:"status_message,omitempty"`

	// The trigger of execution
	Trigger string `json:"trigger,omitempty"`

	// The vendor id of execution
	VendorID int64 `json:"vendor_id,omitempty"`

	// The vendor type of execution
	VendorType string `json:"vendor_type,omitempty"`
}

// Validate validates this execution
func (m *Execution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtraAttrs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Execution) validateExtraAttrs(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtraAttrs) { // not required
		return nil
	}

	if err := m.ExtraAttrs.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("extra_attrs")
		}
		return err
	}

	return nil
}

func (m *Execution) validateMetrics(formats strfmt.Registry) error {

	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Execution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Execution) UnmarshalBinary(b []byte) error {
	var res Execution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
