// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRepositoryParams creates a new GetRepositoryParams object
// with the default values initialized.
func NewGetRepositoryParams() *GetRepositoryParams {
	var ()
	return &GetRepositoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoryParamsWithTimeout creates a new GetRepositoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepositoryParamsWithTimeout(timeout time.Duration) *GetRepositoryParams {
	var ()
	return &GetRepositoryParams{

		timeout: timeout,
	}
}

// NewGetRepositoryParamsWithContext creates a new GetRepositoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepositoryParamsWithContext(ctx context.Context) *GetRepositoryParams {
	var ()
	return &GetRepositoryParams{

		Context: ctx,
	}
}

// NewGetRepositoryParamsWithHTTPClient creates a new GetRepositoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepositoryParamsWithHTTPClient(client *http.Client) *GetRepositoryParams {
	var ()
	return &GetRepositoryParams{
		HTTPClient: client,
	}
}

/*GetRepositoryParams contains all the parameters to send to the API endpoint
for the get repository operation typically these are written to a http.Request
*/
type GetRepositoryParams struct {

	/*XRequestID
	  An unique ID for the request

	*/
	XRequestID *string
	/*ProjectName
	  The name of the project

	*/
	ProjectName string
	/*RepositoryName
	  The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb

	*/
	RepositoryName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repository params
func (o *GetRepositoryParams) WithTimeout(timeout time.Duration) *GetRepositoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repository params
func (o *GetRepositoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repository params
func (o *GetRepositoryParams) WithContext(ctx context.Context) *GetRepositoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repository params
func (o *GetRepositoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repository params
func (o *GetRepositoryParams) WithHTTPClient(client *http.Client) *GetRepositoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repository params
func (o *GetRepositoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the get repository params
func (o *GetRepositoryParams) WithXRequestID(xRequestID *string) *GetRepositoryParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the get repository params
func (o *GetRepositoryParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithProjectName adds the projectName to the get repository params
func (o *GetRepositoryParams) WithProjectName(projectName string) *GetRepositoryParams {
	o.SetProjectName(projectName)
	return o
}

// SetProjectName adds the projectName to the get repository params
func (o *GetRepositoryParams) SetProjectName(projectName string) {
	o.ProjectName = projectName
}

// WithRepositoryName adds the repositoryName to the get repository params
func (o *GetRepositoryParams) WithRepositoryName(repositoryName string) *GetRepositoryParams {
	o.SetRepositoryName(repositoryName)
	return o
}

// SetRepositoryName adds the repositoryName to the get repository params
func (o *GetRepositoryParams) SetRepositoryName(repositoryName string) {
	o.RepositoryName = repositoryName
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}

	}

	// path param project_name
	if err := r.SetPathParam("project_name", o.ProjectName); err != nil {
		return err
	}

	// path param repository_name
	if err := r.SetPathParam("repository_name", o.RepositoryName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
