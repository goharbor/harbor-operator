// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetArtifactParams creates a new GetArtifactParams object
// with the default values initialized.
func NewGetArtifactParams() *GetArtifactParams {
	var (
		pageDefault                = int64(1)
		pageSizeDefault            = int64(10)
		withImmutableStatusDefault = bool(false)
		withLabelDefault           = bool(false)
		withScanOverviewDefault    = bool(false)
		withSignatureDefault       = bool(false)
		withTagDefault             = bool(true)
	)
	return &GetArtifactParams{
		Page:                &pageDefault,
		PageSize:            &pageSizeDefault,
		WithImmutableStatus: &withImmutableStatusDefault,
		WithLabel:           &withLabelDefault,
		WithScanOverview:    &withScanOverviewDefault,
		WithSignature:       &withSignatureDefault,
		WithTag:             &withTagDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetArtifactParamsWithTimeout creates a new GetArtifactParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetArtifactParamsWithTimeout(timeout time.Duration) *GetArtifactParams {
	var (
		pageDefault                = int64(1)
		pageSizeDefault            = int64(10)
		withImmutableStatusDefault = bool(false)
		withLabelDefault           = bool(false)
		withScanOverviewDefault    = bool(false)
		withSignatureDefault       = bool(false)
		withTagDefault             = bool(true)
	)
	return &GetArtifactParams{
		Page:                &pageDefault,
		PageSize:            &pageSizeDefault,
		WithImmutableStatus: &withImmutableStatusDefault,
		WithLabel:           &withLabelDefault,
		WithScanOverview:    &withScanOverviewDefault,
		WithSignature:       &withSignatureDefault,
		WithTag:             &withTagDefault,

		timeout: timeout,
	}
}

// NewGetArtifactParamsWithContext creates a new GetArtifactParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetArtifactParamsWithContext(ctx context.Context) *GetArtifactParams {
	var (
		pageDefault                = int64(1)
		pageSizeDefault            = int64(10)
		withImmutableStatusDefault = bool(false)
		withLabelDefault           = bool(false)
		withScanOverviewDefault    = bool(false)
		withSignatureDefault       = bool(false)
		withTagDefault             = bool(true)
	)
	return &GetArtifactParams{
		Page:                &pageDefault,
		PageSize:            &pageSizeDefault,
		WithImmutableStatus: &withImmutableStatusDefault,
		WithLabel:           &withLabelDefault,
		WithScanOverview:    &withScanOverviewDefault,
		WithSignature:       &withSignatureDefault,
		WithTag:             &withTagDefault,

		Context: ctx,
	}
}

// NewGetArtifactParamsWithHTTPClient creates a new GetArtifactParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetArtifactParamsWithHTTPClient(client *http.Client) *GetArtifactParams {
	var (
		pageDefault                = int64(1)
		pageSizeDefault            = int64(10)
		withImmutableStatusDefault = bool(false)
		withLabelDefault           = bool(false)
		withScanOverviewDefault    = bool(false)
		withSignatureDefault       = bool(false)
		withTagDefault             = bool(true)
	)
	return &GetArtifactParams{
		Page:                &pageDefault,
		PageSize:            &pageSizeDefault,
		WithImmutableStatus: &withImmutableStatusDefault,
		WithLabel:           &withLabelDefault,
		WithScanOverview:    &withScanOverviewDefault,
		WithSignature:       &withSignatureDefault,
		WithTag:             &withTagDefault,
		HTTPClient:          client,
	}
}

/*GetArtifactParams contains all the parameters to send to the API endpoint
for the get artifact operation typically these are written to a http.Request
*/
type GetArtifactParams struct {

	/*XRequestID
	  An unique ID for the request

	*/
	XRequestID *string
	/*Page
	  The page number

	*/
	Page *int64
	/*PageSize
	  The size of per page

	*/
	PageSize *int64
	/*ProjectName
	  The name of the project

	*/
	ProjectName string
	/*Reference
	  The reference of the artifact, can be digest or tag

	*/
	Reference string
	/*RepositoryName
	  The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb

	*/
	RepositoryName string
	/*WithImmutableStatus
	  Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting "with_tag=true"

	*/
	WithImmutableStatus *bool
	/*WithLabel
	  Specify whether the labels are inclued inside the returning artifacts

	*/
	WithLabel *bool
	/*WithScanOverview
	  Specify whether the scan overview is inclued inside the returning artifacts

	*/
	WithScanOverview *bool
	/*WithSignature
	  Specify whether the signature is inclued inside the returning artifacts

	*/
	WithSignature *bool
	/*WithTag
	  Specify whether the tags are inclued inside the returning artifacts

	*/
	WithTag *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get artifact params
func (o *GetArtifactParams) WithTimeout(timeout time.Duration) *GetArtifactParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get artifact params
func (o *GetArtifactParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get artifact params
func (o *GetArtifactParams) WithContext(ctx context.Context) *GetArtifactParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get artifact params
func (o *GetArtifactParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get artifact params
func (o *GetArtifactParams) WithHTTPClient(client *http.Client) *GetArtifactParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get artifact params
func (o *GetArtifactParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the get artifact params
func (o *GetArtifactParams) WithXRequestID(xRequestID *string) *GetArtifactParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the get artifact params
func (o *GetArtifactParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithPage adds the page to the get artifact params
func (o *GetArtifactParams) WithPage(page *int64) *GetArtifactParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get artifact params
func (o *GetArtifactParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get artifact params
func (o *GetArtifactParams) WithPageSize(pageSize *int64) *GetArtifactParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get artifact params
func (o *GetArtifactParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithProjectName adds the projectName to the get artifact params
func (o *GetArtifactParams) WithProjectName(projectName string) *GetArtifactParams {
	o.SetProjectName(projectName)
	return o
}

// SetProjectName adds the projectName to the get artifact params
func (o *GetArtifactParams) SetProjectName(projectName string) {
	o.ProjectName = projectName
}

// WithReference adds the reference to the get artifact params
func (o *GetArtifactParams) WithReference(reference string) *GetArtifactParams {
	o.SetReference(reference)
	return o
}

// SetReference adds the reference to the get artifact params
func (o *GetArtifactParams) SetReference(reference string) {
	o.Reference = reference
}

// WithRepositoryName adds the repositoryName to the get artifact params
func (o *GetArtifactParams) WithRepositoryName(repositoryName string) *GetArtifactParams {
	o.SetRepositoryName(repositoryName)
	return o
}

// SetRepositoryName adds the repositoryName to the get artifact params
func (o *GetArtifactParams) SetRepositoryName(repositoryName string) {
	o.RepositoryName = repositoryName
}

// WithWithImmutableStatus adds the withImmutableStatus to the get artifact params
func (o *GetArtifactParams) WithWithImmutableStatus(withImmutableStatus *bool) *GetArtifactParams {
	o.SetWithImmutableStatus(withImmutableStatus)
	return o
}

// SetWithImmutableStatus adds the withImmutableStatus to the get artifact params
func (o *GetArtifactParams) SetWithImmutableStatus(withImmutableStatus *bool) {
	o.WithImmutableStatus = withImmutableStatus
}

// WithWithLabel adds the withLabel to the get artifact params
func (o *GetArtifactParams) WithWithLabel(withLabel *bool) *GetArtifactParams {
	o.SetWithLabel(withLabel)
	return o
}

// SetWithLabel adds the withLabel to the get artifact params
func (o *GetArtifactParams) SetWithLabel(withLabel *bool) {
	o.WithLabel = withLabel
}

// WithWithScanOverview adds the withScanOverview to the get artifact params
func (o *GetArtifactParams) WithWithScanOverview(withScanOverview *bool) *GetArtifactParams {
	o.SetWithScanOverview(withScanOverview)
	return o
}

// SetWithScanOverview adds the withScanOverview to the get artifact params
func (o *GetArtifactParams) SetWithScanOverview(withScanOverview *bool) {
	o.WithScanOverview = withScanOverview
}

// WithWithSignature adds the withSignature to the get artifact params
func (o *GetArtifactParams) WithWithSignature(withSignature *bool) *GetArtifactParams {
	o.SetWithSignature(withSignature)
	return o
}

// SetWithSignature adds the withSignature to the get artifact params
func (o *GetArtifactParams) SetWithSignature(withSignature *bool) {
	o.WithSignature = withSignature
}

// WithWithTag adds the withTag to the get artifact params
func (o *GetArtifactParams) WithWithTag(withTag *bool) *GetArtifactParams {
	o.SetWithTag(withTag)
	return o
}

// SetWithTag adds the withTag to the get artifact params
func (o *GetArtifactParams) SetWithTag(withTag *bool) {
	o.WithTag = withTag
}

// WriteToRequest writes these params to a swagger request
func (o *GetArtifactParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	// path param project_name
	if err := r.SetPathParam("project_name", o.ProjectName); err != nil {
		return err
	}

	// path param reference
	if err := r.SetPathParam("reference", o.Reference); err != nil {
		return err
	}

	// path param repository_name
	if err := r.SetPathParam("repository_name", o.RepositoryName); err != nil {
		return err
	}

	if o.WithImmutableStatus != nil {

		// query param with_immutable_status
		var qrWithImmutableStatus bool
		if o.WithImmutableStatus != nil {
			qrWithImmutableStatus = *o.WithImmutableStatus
		}
		qWithImmutableStatus := swag.FormatBool(qrWithImmutableStatus)
		if qWithImmutableStatus != "" {
			if err := r.SetQueryParam("with_immutable_status", qWithImmutableStatus); err != nil {
				return err
			}
		}

	}

	if o.WithLabel != nil {

		// query param with_label
		var qrWithLabel bool
		if o.WithLabel != nil {
			qrWithLabel = *o.WithLabel
		}
		qWithLabel := swag.FormatBool(qrWithLabel)
		if qWithLabel != "" {
			if err := r.SetQueryParam("with_label", qWithLabel); err != nil {
				return err
			}
		}

	}

	if o.WithScanOverview != nil {

		// query param with_scan_overview
		var qrWithScanOverview bool
		if o.WithScanOverview != nil {
			qrWithScanOverview = *o.WithScanOverview
		}
		qWithScanOverview := swag.FormatBool(qrWithScanOverview)
		if qWithScanOverview != "" {
			if err := r.SetQueryParam("with_scan_overview", qWithScanOverview); err != nil {
				return err
			}
		}

	}

	if o.WithSignature != nil {

		// query param with_signature
		var qrWithSignature bool
		if o.WithSignature != nil {
			qrWithSignature = *o.WithSignature
		}
		qWithSignature := swag.FormatBool(qrWithSignature)
		if qWithSignature != "" {
			if err := r.SetQueryParam("with_signature", qWithSignature); err != nil {
				return err
			}
		}

	}

	if o.WithTag != nil {

		// query param with_tag
		var qrWithTag bool
		if o.WithTag != nil {
			qrWithTag = *o.WithTag
		}
		qWithTag := swag.FormatBool(qrWithTag)
		if qWithTag != "" {
			if err := r.SetQueryParam("with_tag", qWithTag); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
