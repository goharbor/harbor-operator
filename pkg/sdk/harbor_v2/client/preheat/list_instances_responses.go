// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor-operator/pkg/sdk/harbor_v2/models"
)

// ListInstancesReader is a Reader for the ListInstances structure.
type ListInstancesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListInstancesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListInstancesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListInstancesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListInstancesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListInstancesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListInstancesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListInstancesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListInstancesOK creates a ListInstancesOK with default headers values
func NewListInstancesOK() *ListInstancesOK {
	return &ListInstancesOK{}
}

/*ListInstancesOK handles this case with default header values.

Success
*/
type ListInstancesOK struct {
	/*Link refers to the previous page and next page
	 */
	Link string
	/*The total count of preheating provider instances
	 */
	XTotalCount int64

	Payload []*models.Instance
}

func (o *ListInstancesOK) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/instances][%d] listInstancesOK  %+v", 200, o.Payload)
}

func (o *ListInstancesOK) GetPayload() []*models.Instance {
	return o.Payload
}

func (o *ListInstancesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header X-Total-Count
	xTotalCount, err := swag.ConvertInt64(response.GetHeader("X-Total-Count"))
	if err != nil {
		return errors.InvalidType("X-Total-Count", "header", "int64", response.GetHeader("X-Total-Count"))
	}
	o.XTotalCount = xTotalCount

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInstancesBadRequest creates a ListInstancesBadRequest with default headers values
func NewListInstancesBadRequest() *ListInstancesBadRequest {
	return &ListInstancesBadRequest{}
}

/*ListInstancesBadRequest handles this case with default header values.

Bad request
*/
type ListInstancesBadRequest struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

func (o *ListInstancesBadRequest) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/instances][%d] listInstancesBadRequest  %+v", 400, o.Payload)
}

func (o *ListInstancesBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListInstancesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInstancesUnauthorized creates a ListInstancesUnauthorized with default headers values
func NewListInstancesUnauthorized() *ListInstancesUnauthorized {
	return &ListInstancesUnauthorized{}
}

/*ListInstancesUnauthorized handles this case with default header values.

Unauthorized
*/
type ListInstancesUnauthorized struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

func (o *ListInstancesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/instances][%d] listInstancesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListInstancesUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListInstancesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInstancesForbidden creates a ListInstancesForbidden with default headers values
func NewListInstancesForbidden() *ListInstancesForbidden {
	return &ListInstancesForbidden{}
}

/*ListInstancesForbidden handles this case with default header values.

Forbidden
*/
type ListInstancesForbidden struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

func (o *ListInstancesForbidden) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/instances][%d] listInstancesForbidden  %+v", 403, o.Payload)
}

func (o *ListInstancesForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListInstancesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInstancesNotFound creates a ListInstancesNotFound with default headers values
func NewListInstancesNotFound() *ListInstancesNotFound {
	return &ListInstancesNotFound{}
}

/*ListInstancesNotFound handles this case with default header values.

Not found
*/
type ListInstancesNotFound struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

func (o *ListInstancesNotFound) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/instances][%d] listInstancesNotFound  %+v", 404, o.Payload)
}

func (o *ListInstancesNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListInstancesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInstancesInternalServerError creates a ListInstancesInternalServerError with default headers values
func NewListInstancesInternalServerError() *ListInstancesInternalServerError {
	return &ListInstancesInternalServerError{}
}

/*ListInstancesInternalServerError handles this case with default header values.

Internal server error
*/
type ListInstancesInternalServerError struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

func (o *ListInstancesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/instances][%d] listInstancesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListInstancesInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListInstancesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
