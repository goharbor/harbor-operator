// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigurationsResponse configurations response
//
// swagger:model ConfigurationsResponse
type ConfigurationsResponse struct {

	// The auth mode of current system, such as "db_auth", "ldap_auth"
	AuthMode *StringConfigItem `json:"auth_mode,omitempty"`

	// The default count quota for the new created projects.
	CountPerProject *IntegerConfigItem `json:"count_per_project,omitempty"`

	// The sender name for Email notification.
	EmailFrom *StringConfigItem `json:"email_from,omitempty"`

	// The hostname of SMTP server that sends Email notification.
	EmailHost *StringConfigItem `json:"email_host,omitempty"`

	// By default it's empty so the email_username is picked.
	EmailIdentity *StringConfigItem `json:"email_identity,omitempty"`

	// Whether or not the certificate will be verified when Harbor tries to access the email server.
	EmailInsecure *BoolConfigItem `json:"email_insecure,omitempty"`

	// The port of SMTP server.
	EmailPort *IntegerConfigItem `json:"email_port,omitempty"`

	// When it's set to true the system will access Email server via TLS by default.  If it's set to false, it still will handle "STARTTLS" from server side.
	EmailSsl *BoolConfigItem `json:"email_ssl,omitempty"`

	// The username for authenticate against SMTP server.
	EmailUsername *StringConfigItem `json:"email_username,omitempty"`

	// The Base DN for LDAP binding.
	LdapBaseDn *StringConfigItem `json:"ldap_base_dn,omitempty"`

	// The filter for LDAP binding.
	LdapFilter *StringConfigItem `json:"ldap_filter,omitempty"`

	// Specify the ldap group which have the same privilege with Harbor admin.
	LdapGroupAdminDn *StringConfigItem `json:"ldap_group_admin_dn,omitempty"`

	// The attribute which is used as identity of the LDAP group, default is cn.
	LdapGroupAttributeName *StringConfigItem `json:"ldap_group_attribute_name,omitempty"`

	// The base DN to search LDAP group.
	LdapGroupBaseDn *StringConfigItem `json:"ldap_group_base_dn,omitempty"`

	// The filter to search the ldap group.
	LdapGroupSearchFilter *StringConfigItem `json:"ldap_group_search_filter,omitempty"`

	// The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'
	LdapGroupSearchScope *IntegerConfigItem `json:"ldap_group_search_scope,omitempty"`

	// 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE
	LdapScope int64 `json:"ldap_scope,omitempty"`

	// The DN of the user to do the search.
	LdapSearchDn string `json:"ldap_search_dn,omitempty"`

	// timeout in seconds for connection to LDAP server.
	LdapTimeout *IntegerConfigItem `json:"ldap_timeout,omitempty"`

	// The attribute which is used as identity for the LDAP binding, such as "CN" or "SAMAccountname"
	LdapUID *StringConfigItem `json:"ldap_uid,omitempty"`

	// The URL of LDAP server.
	LdapURL *StringConfigItem `json:"ldap_url,omitempty"`

	// The client id of the OIDC.
	OidcClientID *StringConfigItem `json:"oidc_client_id,omitempty"`

	// The URL of an OIDC-complaint server, must start with 'https://'.
	OidcEndpoint *StringConfigItem `json:"oidc_endpoint,omitempty"`

	// The name of the OIDC provider.
	OidcName *StringConfigItem `json:"oidc_name,omitempty"`

	// The scope sent to OIDC server during authentication, should be separated by comma. It has to contain “openid”, and “offline_access”. If you are using google, please remove “offline_access” from this field.
	OidcScope *StringConfigItem `json:"oidc_scope,omitempty"`

	// Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.
	OidcVerifyCert *BoolConfigItem `json:"oidc_verify_cert,omitempty"`

	// This attribute restricts what users have the permission to create project.  It can be "everyone" or "adminonly".
	ProjectCreationRestriction *StringConfigItem `json:"project_creation_restriction,omitempty"`

	// This attribute indicates whether quota per project enabled in harbor
	QuotaPerProjectEnable *BoolConfigItem `json:"quota_per_project_enable,omitempty"`

	// 'docker push' is prohibited by Harbor if you set it to true.
	ReadOnly *BoolConfigItem `json:"read_only,omitempty"`

	// scan all policy
	ScanAllPolicy *ConfigurationsResponseScanAllPolicy `json:"scan_all_policy,omitempty"`

	// Whether the Harbor instance supports self-registration.  If it's set to false, admin need to add user to the instance.
	SelfRegistration *BoolConfigItem `json:"self_registration,omitempty"`

	// The default storage quota for the new created projects.
	StoragePerProject *IntegerConfigItem `json:"storage_per_project,omitempty"`

	// The expiration time of the token for internal Registry, in minutes.
	TokenExpiration *IntegerConfigItem `json:"token_expiration,omitempty"`

	// Whether or not the certificate will be verified when Harbor tries to access a remote Harbor instance for replication.
	VerifyRemoteCert *BoolConfigItem `json:"verify_remote_cert,omitempty"`
}

// Validate validates this configurations response
func (m *ConfigurationsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountPerProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailInsecure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailSsl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapBaseDn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupAdminDn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupAttributeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupBaseDn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupSearchFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupSearchScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOidcClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOidcEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOidcName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOidcScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOidcVerifyCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectCreationRestriction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaPerProjectEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanAllPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfRegistration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePerProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerifyRemoteCert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigurationsResponse) validateAuthMode(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthMode) { // not required
		return nil
	}

	if m.AuthMode != nil {
		if err := m.AuthMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_mode")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateCountPerProject(formats strfmt.Registry) error {

	if swag.IsZero(m.CountPerProject) { // not required
		return nil
	}

	if m.CountPerProject != nil {
		if err := m.CountPerProject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("count_per_project")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailFrom) { // not required
		return nil
	}

	if m.EmailFrom != nil {
		if err := m.EmailFrom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_from")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailHost(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailHost) { // not required
		return nil
	}

	if m.EmailHost != nil {
		if err := m.EmailHost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_host")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailIdentity) { // not required
		return nil
	}

	if m.EmailIdentity != nil {
		if err := m.EmailIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_identity")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailInsecure(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailInsecure) { // not required
		return nil
	}

	if m.EmailInsecure != nil {
		if err := m.EmailInsecure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_insecure")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailPort(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailPort) { // not required
		return nil
	}

	if m.EmailPort != nil {
		if err := m.EmailPort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_port")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailSsl(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailSsl) { // not required
		return nil
	}

	if m.EmailSsl != nil {
		if err := m.EmailSsl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_ssl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailUsername(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailUsername) { // not required
		return nil
	}

	if m.EmailUsername != nil {
		if err := m.EmailUsername.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_username")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapBaseDn(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapBaseDn) { // not required
		return nil
	}

	if m.LdapBaseDn != nil {
		if err := m.LdapBaseDn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_base_dn")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapFilter) { // not required
		return nil
	}

	if m.LdapFilter != nil {
		if err := m.LdapFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupAdminDn(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupAdminDn) { // not required
		return nil
	}

	if m.LdapGroupAdminDn != nil {
		if err := m.LdapGroupAdminDn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_admin_dn")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupAttributeName(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupAttributeName) { // not required
		return nil
	}

	if m.LdapGroupAttributeName != nil {
		if err := m.LdapGroupAttributeName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_attribute_name")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupBaseDn(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupBaseDn) { // not required
		return nil
	}

	if m.LdapGroupBaseDn != nil {
		if err := m.LdapGroupBaseDn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_base_dn")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupSearchFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupSearchFilter) { // not required
		return nil
	}

	if m.LdapGroupSearchFilter != nil {
		if err := m.LdapGroupSearchFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_search_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupSearchScope(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupSearchScope) { // not required
		return nil
	}

	if m.LdapGroupSearchScope != nil {
		if err := m.LdapGroupSearchScope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_search_scope")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapTimeout) { // not required
		return nil
	}

	if m.LdapTimeout != nil {
		if err := m.LdapTimeout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_timeout")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapUID(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapUID) { // not required
		return nil
	}

	if m.LdapUID != nil {
		if err := m.LdapUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_uid")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapURL(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapURL) { // not required
		return nil
	}

	if m.LdapURL != nil {
		if err := m.LdapURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_url")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOidcClientID(formats strfmt.Registry) error {

	if swag.IsZero(m.OidcClientID) { // not required
		return nil
	}

	if m.OidcClientID != nil {
		if err := m.OidcClientID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_client_id")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOidcEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.OidcEndpoint) { // not required
		return nil
	}

	if m.OidcEndpoint != nil {
		if err := m.OidcEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOidcName(formats strfmt.Registry) error {

	if swag.IsZero(m.OidcName) { // not required
		return nil
	}

	if m.OidcName != nil {
		if err := m.OidcName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_name")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOidcScope(formats strfmt.Registry) error {

	if swag.IsZero(m.OidcScope) { // not required
		return nil
	}

	if m.OidcScope != nil {
		if err := m.OidcScope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_scope")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOidcVerifyCert(formats strfmt.Registry) error {

	if swag.IsZero(m.OidcVerifyCert) { // not required
		return nil
	}

	if m.OidcVerifyCert != nil {
		if err := m.OidcVerifyCert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_verify_cert")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateProjectCreationRestriction(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectCreationRestriction) { // not required
		return nil
	}

	if m.ProjectCreationRestriction != nil {
		if err := m.ProjectCreationRestriction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project_creation_restriction")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateQuotaPerProjectEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.QuotaPerProjectEnable) { // not required
		return nil
	}

	if m.QuotaPerProjectEnable != nil {
		if err := m.QuotaPerProjectEnable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota_per_project_enable")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateReadOnly(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadOnly) { // not required
		return nil
	}

	if m.ReadOnly != nil {
		if err := m.ReadOnly.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("read_only")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateScanAllPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ScanAllPolicy) { // not required
		return nil
	}

	if m.ScanAllPolicy != nil {
		if err := m.ScanAllPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_all_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateSelfRegistration(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfRegistration) { // not required
		return nil
	}

	if m.SelfRegistration != nil {
		if err := m.SelfRegistration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_registration")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateStoragePerProject(formats strfmt.Registry) error {

	if swag.IsZero(m.StoragePerProject) { // not required
		return nil
	}

	if m.StoragePerProject != nil {
		if err := m.StoragePerProject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_per_project")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateTokenExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.TokenExpiration) { // not required
		return nil
	}

	if m.TokenExpiration != nil {
		if err := m.TokenExpiration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_expiration")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateVerifyRemoteCert(formats strfmt.Registry) error {

	if swag.IsZero(m.VerifyRemoteCert) { // not required
		return nil
	}

	if m.VerifyRemoteCert != nil {
		if err := m.VerifyRemoteCert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verify_remote_cert")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationsResponse) UnmarshalBinary(b []byte) error {
	var res ConfigurationsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigurationsResponseScanAllPolicy configurations response scan all policy
//
// swagger:model ConfigurationsResponseScanAllPolicy
type ConfigurationsResponseScanAllPolicy struct {

	// parameter
	Parameter *ConfigurationsResponseScanAllPolicyParameter `json:"parameter,omitempty"`

	// The type of scan all policy, currently the valid values are "none" and "daily"
	Type string `json:"type,omitempty"`
}

// Validate validates this configurations response scan all policy
func (m *ConfigurationsResponseScanAllPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigurationsResponseScanAllPolicy) validateParameter(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameter) { // not required
		return nil
	}

	if m.Parameter != nil {
		if err := m.Parameter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_all_policy" + "." + "parameter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationsResponseScanAllPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationsResponseScanAllPolicy) UnmarshalBinary(b []byte) error {
	var res ConfigurationsResponseScanAllPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigurationsResponseScanAllPolicyParameter The parameters of the policy, the values are dependant on the type of the policy.
//
// swagger:model ConfigurationsResponseScanAllPolicyParameter
type ConfigurationsResponseScanAllPolicyParameter struct {

	// The offset in seconds of UTC 0 o'clock, only valid when the policy type is "daily"
	DailyTime int64 `json:"daily_time,omitempty"`
}

// Validate validates this configurations response scan all policy parameter
func (m *ConfigurationsResponseScanAllPolicyParameter) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationsResponseScanAllPolicyParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationsResponseScanAllPolicyParameter) UnmarshalBinary(b []byte) error {
	var res ConfigurationsResponseScanAllPolicyParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
