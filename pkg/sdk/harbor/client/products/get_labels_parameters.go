// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLabelsParams creates a new GetLabelsParams object
// with the default values initialized.
func NewGetLabelsParams() *GetLabelsParams {
	var ()
	return &GetLabelsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLabelsParamsWithTimeout creates a new GetLabelsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLabelsParamsWithTimeout(timeout time.Duration) *GetLabelsParams {
	var ()
	return &GetLabelsParams{

		timeout: timeout,
	}
}

// NewGetLabelsParamsWithContext creates a new GetLabelsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLabelsParamsWithContext(ctx context.Context) *GetLabelsParams {
	var ()
	return &GetLabelsParams{

		Context: ctx,
	}
}

// NewGetLabelsParamsWithHTTPClient creates a new GetLabelsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLabelsParamsWithHTTPClient(client *http.Client) *GetLabelsParams {
	var ()
	return &GetLabelsParams{
		HTTPClient: client,
	}
}

/*GetLabelsParams contains all the parameters to send to the API endpoint
for the get labels operation typically these are written to a http.Request
*/
type GetLabelsParams struct {

	/*Name
	  The label name.

	*/
	Name *string
	/*Page
	  The page number.

	*/
	Page *int32
	/*PageSize
	  The size of per page.

	*/
	PageSize *int32
	/*ProjectID
	  Relevant project ID, required when scope is p.

	*/
	ProjectID *int64
	/*Scope
	  The label scope. Valid values are g and p. g for global labels and p for project labels.

	*/
	Scope string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get labels params
func (o *GetLabelsParams) WithTimeout(timeout time.Duration) *GetLabelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get labels params
func (o *GetLabelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get labels params
func (o *GetLabelsParams) WithContext(ctx context.Context) *GetLabelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get labels params
func (o *GetLabelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get labels params
func (o *GetLabelsParams) WithHTTPClient(client *http.Client) *GetLabelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get labels params
func (o *GetLabelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get labels params
func (o *GetLabelsParams) WithName(name *string) *GetLabelsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get labels params
func (o *GetLabelsParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the get labels params
func (o *GetLabelsParams) WithPage(page *int32) *GetLabelsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get labels params
func (o *GetLabelsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get labels params
func (o *GetLabelsParams) WithPageSize(pageSize *int32) *GetLabelsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get labels params
func (o *GetLabelsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithProjectID adds the projectID to the get labels params
func (o *GetLabelsParams) WithProjectID(projectID *int64) *GetLabelsParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get labels params
func (o *GetLabelsParams) SetProjectID(projectID *int64) {
	o.ProjectID = projectID
}

// WithScope adds the scope to the get labels params
func (o *GetLabelsParams) WithScope(scope string) *GetLabelsParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get labels params
func (o *GetLabelsParams) SetScope(scope string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *GetLabelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param project_id
		var qrProjectID int64
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := swag.FormatInt64(qrProjectID)
		if qProjectID != "" {
			if err := r.SetQueryParam("project_id", qProjectID); err != nil {
				return err
			}
		}

	}

	// query param scope
	qrScope := o.Scope
	qScope := qrScope
	if qScope != "" {
		if err := r.SetQueryParam("scope", qScope); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
