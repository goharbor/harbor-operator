// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutUsersUserIDCliSecretReader is a Reader for the PutUsersUserIDCliSecret structure.
type PutUsersUserIDCliSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUsersUserIDCliSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUsersUserIDCliSecretOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutUsersUserIDCliSecretBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutUsersUserIDCliSecretUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutUsersUserIDCliSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutUsersUserIDCliSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPutUsersUserIDCliSecretPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutUsersUserIDCliSecretInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutUsersUserIDCliSecretOK creates a PutUsersUserIDCliSecretOK with default headers values
func NewPutUsersUserIDCliSecretOK() *PutUsersUserIDCliSecretOK {
	return &PutUsersUserIDCliSecretOK{}
}

/*PutUsersUserIDCliSecretOK handles this case with default header values.

The secret is successfully updated
*/
type PutUsersUserIDCliSecretOK struct {
}

func (o *PutUsersUserIDCliSecretOK) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] putUsersUserIdCliSecretOK ", 200)
}

func (o *PutUsersUserIDCliSecretOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUsersUserIDCliSecretBadRequest creates a PutUsersUserIDCliSecretBadRequest with default headers values
func NewPutUsersUserIDCliSecretBadRequest() *PutUsersUserIDCliSecretBadRequest {
	return &PutUsersUserIDCliSecretBadRequest{}
}

/*PutUsersUserIDCliSecretBadRequest handles this case with default header values.

Invalid user ID.  Or user is not onboarded via OIDC authentication. Or the secret does not meet the standard.
*/
type PutUsersUserIDCliSecretBadRequest struct {
}

func (o *PutUsersUserIDCliSecretBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] putUsersUserIdCliSecretBadRequest ", 400)
}

func (o *PutUsersUserIDCliSecretBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUsersUserIDCliSecretUnauthorized creates a PutUsersUserIDCliSecretUnauthorized with default headers values
func NewPutUsersUserIDCliSecretUnauthorized() *PutUsersUserIDCliSecretUnauthorized {
	return &PutUsersUserIDCliSecretUnauthorized{}
}

/*PutUsersUserIDCliSecretUnauthorized handles this case with default header values.

User need to log in first.
*/
type PutUsersUserIDCliSecretUnauthorized struct {
}

func (o *PutUsersUserIDCliSecretUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] putUsersUserIdCliSecretUnauthorized ", 401)
}

func (o *PutUsersUserIDCliSecretUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUsersUserIDCliSecretForbidden creates a PutUsersUserIDCliSecretForbidden with default headers values
func NewPutUsersUserIDCliSecretForbidden() *PutUsersUserIDCliSecretForbidden {
	return &PutUsersUserIDCliSecretForbidden{}
}

/*PutUsersUserIDCliSecretForbidden handles this case with default header values.

Non-admin user can only generate the cli secret of himself.
*/
type PutUsersUserIDCliSecretForbidden struct {
}

func (o *PutUsersUserIDCliSecretForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] putUsersUserIdCliSecretForbidden ", 403)
}

func (o *PutUsersUserIDCliSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUsersUserIDCliSecretNotFound creates a PutUsersUserIDCliSecretNotFound with default headers values
func NewPutUsersUserIDCliSecretNotFound() *PutUsersUserIDCliSecretNotFound {
	return &PutUsersUserIDCliSecretNotFound{}
}

/*PutUsersUserIDCliSecretNotFound handles this case with default header values.

User ID does not exist.
*/
type PutUsersUserIDCliSecretNotFound struct {
}

func (o *PutUsersUserIDCliSecretNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] putUsersUserIdCliSecretNotFound ", 404)
}

func (o *PutUsersUserIDCliSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUsersUserIDCliSecretPreconditionFailed creates a PutUsersUserIDCliSecretPreconditionFailed with default headers values
func NewPutUsersUserIDCliSecretPreconditionFailed() *PutUsersUserIDCliSecretPreconditionFailed {
	return &PutUsersUserIDCliSecretPreconditionFailed{}
}

/*PutUsersUserIDCliSecretPreconditionFailed handles this case with default header values.

The auth mode of the system is not "oidc_auth", or the user is not onboarded via OIDC AuthN.
*/
type PutUsersUserIDCliSecretPreconditionFailed struct {
}

func (o *PutUsersUserIDCliSecretPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] putUsersUserIdCliSecretPreconditionFailed ", 412)
}

func (o *PutUsersUserIDCliSecretPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUsersUserIDCliSecretInternalServerError creates a PutUsersUserIDCliSecretInternalServerError with default headers values
func NewPutUsersUserIDCliSecretInternalServerError() *PutUsersUserIDCliSecretInternalServerError {
	return &PutUsersUserIDCliSecretInternalServerError{}
}

/*PutUsersUserIDCliSecretInternalServerError handles this case with default header values.

Unexpected internal errors.
*/
type PutUsersUserIDCliSecretInternalServerError struct {
}

func (o *PutUsersUserIDCliSecretInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] putUsersUserIdCliSecretInternalServerError ", 500)
}

func (o *PutUsersUserIDCliSecretInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PutUsersUserIDCliSecretBody put users user ID cli secret body
swagger:model PutUsersUserIDCliSecretBody
*/
type PutUsersUserIDCliSecretBody struct {

	// The new secret
	Secret string `json:"secret,omitempty"`
}

// Validate validates this put users user ID cli secret body
func (o *PutUsersUserIDCliSecretBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUsersUserIDCliSecretBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUsersUserIDCliSecretBody) UnmarshalBinary(b []byte) error {
	var res PutUsersUserIDCliSecretBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
