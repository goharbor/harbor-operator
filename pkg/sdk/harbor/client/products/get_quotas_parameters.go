// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetQuotasParams creates a new GetQuotasParams object
// with the default values initialized.
func NewGetQuotasParams() *GetQuotasParams {
	var ()
	return &GetQuotasParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetQuotasParamsWithTimeout creates a new GetQuotasParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetQuotasParamsWithTimeout(timeout time.Duration) *GetQuotasParams {
	var ()
	return &GetQuotasParams{

		timeout: timeout,
	}
}

// NewGetQuotasParamsWithContext creates a new GetQuotasParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetQuotasParamsWithContext(ctx context.Context) *GetQuotasParams {
	var ()
	return &GetQuotasParams{

		Context: ctx,
	}
}

// NewGetQuotasParamsWithHTTPClient creates a new GetQuotasParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetQuotasParamsWithHTTPClient(client *http.Client) *GetQuotasParams {
	var ()
	return &GetQuotasParams{
		HTTPClient: client,
	}
}

/*GetQuotasParams contains all the parameters to send to the API endpoint
for the get quotas operation typically these are written to a http.Request
*/
type GetQuotasParams struct {

	/*Page
	  The page number, default is 1.

	*/
	Page *int32
	/*PageSize
	  The size of per page, default is 10, maximum is 100.

	*/
	PageSize *int32
	/*Reference
	  The reference type of quota.

	*/
	Reference *string
	/*ReferenceID
	  The reference id of quota.

	*/
	ReferenceID *string
	/*Sort
	  Sort method, valid values include:
	'hard.resource_name', '-hard.resource_name', 'used.resource_name', '-used.resource_name'.
	Here '-' stands for descending order, resource_name should be the real resource name of the quota.


	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get quotas params
func (o *GetQuotasParams) WithTimeout(timeout time.Duration) *GetQuotasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get quotas params
func (o *GetQuotasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get quotas params
func (o *GetQuotasParams) WithContext(ctx context.Context) *GetQuotasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get quotas params
func (o *GetQuotasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get quotas params
func (o *GetQuotasParams) WithHTTPClient(client *http.Client) *GetQuotasParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get quotas params
func (o *GetQuotasParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the get quotas params
func (o *GetQuotasParams) WithPage(page *int32) *GetQuotasParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get quotas params
func (o *GetQuotasParams) SetPage(page *int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get quotas params
func (o *GetQuotasParams) WithPageSize(pageSize *int32) *GetQuotasParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get quotas params
func (o *GetQuotasParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithReference adds the reference to the get quotas params
func (o *GetQuotasParams) WithReference(reference *string) *GetQuotasParams {
	o.SetReference(reference)
	return o
}

// SetReference adds the reference to the get quotas params
func (o *GetQuotasParams) SetReference(reference *string) {
	o.Reference = reference
}

// WithReferenceID adds the referenceID to the get quotas params
func (o *GetQuotasParams) WithReferenceID(referenceID *string) *GetQuotasParams {
	o.SetReferenceID(referenceID)
	return o
}

// SetReferenceID adds the referenceId to the get quotas params
func (o *GetQuotasParams) SetReferenceID(referenceID *string) {
	o.ReferenceID = referenceID
}

// WithSort adds the sort to the get quotas params
func (o *GetQuotasParams) WithSort(sort *string) *GetQuotasParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get quotas params
func (o *GetQuotasParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetQuotasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Reference != nil {

		// query param reference
		var qrReference string
		if o.Reference != nil {
			qrReference = *o.Reference
		}
		qReference := qrReference
		if qReference != "" {
			if err := r.SetQueryParam("reference", qReference); err != nil {
				return err
			}
		}

	}

	if o.ReferenceID != nil {

		// query param reference_id
		var qrReferenceID string
		if o.ReferenceID != nil {
			qrReferenceID = *o.ReferenceID
		}
		qReferenceID := qrReferenceID
		if qReferenceID != "" {
			if err := r.SetQueryParam("reference_id", qReferenceID); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
