// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRegistriesParams creates a new GetRegistriesParams object
// with the default values initialized.
func NewGetRegistriesParams() *GetRegistriesParams {
	var ()
	return &GetRegistriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRegistriesParamsWithTimeout creates a new GetRegistriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRegistriesParamsWithTimeout(timeout time.Duration) *GetRegistriesParams {
	var ()
	return &GetRegistriesParams{

		timeout: timeout,
	}
}

// NewGetRegistriesParamsWithContext creates a new GetRegistriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRegistriesParamsWithContext(ctx context.Context) *GetRegistriesParams {
	var ()
	return &GetRegistriesParams{

		Context: ctx,
	}
}

// NewGetRegistriesParamsWithHTTPClient creates a new GetRegistriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRegistriesParamsWithHTTPClient(client *http.Client) *GetRegistriesParams {
	var ()
	return &GetRegistriesParams{
		HTTPClient: client,
	}
}

/*GetRegistriesParams contains all the parameters to send to the API endpoint
for the get registries operation typically these are written to a http.Request
*/
type GetRegistriesParams struct {

	/*Name
	  Deprecated, use `q` instead.

	*/
	Name *string
	/*Q
	  Query string to query resources. Supported query patterns are "exact match(k=v)", "fuzzy match(k=~v)", "range(k=[min~max])", "list with union releationship(k={v1 v2 v3})" and "list with intersetion relationship(k=(v1 v2 v3))". The value of range and list can be string(enclosed by " or '), integer or time(in format "2020-04-09 02:36:00"). All of these query patterns should be put in the query string "q=xxx" and splitted by ",". e.g. q=k1=v1,k2=~v2,k3=[min~max]

	*/
	Q *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get registries params
func (o *GetRegistriesParams) WithTimeout(timeout time.Duration) *GetRegistriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get registries params
func (o *GetRegistriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get registries params
func (o *GetRegistriesParams) WithContext(ctx context.Context) *GetRegistriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get registries params
func (o *GetRegistriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get registries params
func (o *GetRegistriesParams) WithHTTPClient(client *http.Client) *GetRegistriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get registries params
func (o *GetRegistriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get registries params
func (o *GetRegistriesParams) WithName(name *string) *GetRegistriesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get registries params
func (o *GetRegistriesParams) SetName(name *string) {
	o.Name = name
}

// WithQ adds the q to the get registries params
func (o *GetRegistriesParams) WithQ(q *string) *GetRegistriesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get registries params
func (o *GetRegistriesParams) SetQ(q *string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *GetRegistriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
