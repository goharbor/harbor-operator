// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutReplicationExecutionsIDReader is a Reader for the PutReplicationExecutionsID structure.
type PutReplicationExecutionsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutReplicationExecutionsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutReplicationExecutionsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutReplicationExecutionsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutReplicationExecutionsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutReplicationExecutionsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutReplicationExecutionsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutReplicationExecutionsIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutReplicationExecutionsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutReplicationExecutionsIDOK creates a PutReplicationExecutionsIDOK with default headers values
func NewPutReplicationExecutionsIDOK() *PutReplicationExecutionsIDOK {
	return &PutReplicationExecutionsIDOK{}
}

/*PutReplicationExecutionsIDOK handles this case with default header values.

Success.
*/
type PutReplicationExecutionsIDOK struct {
}

func (o *PutReplicationExecutionsIDOK) Error() string {
	return fmt.Sprintf("[PUT /replication/executions/{id}][%d] putReplicationExecutionsIdOK ", 200)
}

func (o *PutReplicationExecutionsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutReplicationExecutionsIDBadRequest creates a PutReplicationExecutionsIDBadRequest with default headers values
func NewPutReplicationExecutionsIDBadRequest() *PutReplicationExecutionsIDBadRequest {
	return &PutReplicationExecutionsIDBadRequest{}
}

/*PutReplicationExecutionsIDBadRequest handles this case with default header values.

Bad request.
*/
type PutReplicationExecutionsIDBadRequest struct {
}

func (o *PutReplicationExecutionsIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /replication/executions/{id}][%d] putReplicationExecutionsIdBadRequest ", 400)
}

func (o *PutReplicationExecutionsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutReplicationExecutionsIDUnauthorized creates a PutReplicationExecutionsIDUnauthorized with default headers values
func NewPutReplicationExecutionsIDUnauthorized() *PutReplicationExecutionsIDUnauthorized {
	return &PutReplicationExecutionsIDUnauthorized{}
}

/*PutReplicationExecutionsIDUnauthorized handles this case with default header values.

User need to login first.
*/
type PutReplicationExecutionsIDUnauthorized struct {
}

func (o *PutReplicationExecutionsIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /replication/executions/{id}][%d] putReplicationExecutionsIdUnauthorized ", 401)
}

func (o *PutReplicationExecutionsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutReplicationExecutionsIDForbidden creates a PutReplicationExecutionsIDForbidden with default headers values
func NewPutReplicationExecutionsIDForbidden() *PutReplicationExecutionsIDForbidden {
	return &PutReplicationExecutionsIDForbidden{}
}

/*PutReplicationExecutionsIDForbidden handles this case with default header values.

User has no privilege for the operation.
*/
type PutReplicationExecutionsIDForbidden struct {
}

func (o *PutReplicationExecutionsIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /replication/executions/{id}][%d] putReplicationExecutionsIdForbidden ", 403)
}

func (o *PutReplicationExecutionsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutReplicationExecutionsIDNotFound creates a PutReplicationExecutionsIDNotFound with default headers values
func NewPutReplicationExecutionsIDNotFound() *PutReplicationExecutionsIDNotFound {
	return &PutReplicationExecutionsIDNotFound{}
}

/*PutReplicationExecutionsIDNotFound handles this case with default header values.

Resource requested does not exist.
*/
type PutReplicationExecutionsIDNotFound struct {
}

func (o *PutReplicationExecutionsIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /replication/executions/{id}][%d] putReplicationExecutionsIdNotFound ", 404)
}

func (o *PutReplicationExecutionsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutReplicationExecutionsIDUnsupportedMediaType creates a PutReplicationExecutionsIDUnsupportedMediaType with default headers values
func NewPutReplicationExecutionsIDUnsupportedMediaType() *PutReplicationExecutionsIDUnsupportedMediaType {
	return &PutReplicationExecutionsIDUnsupportedMediaType{}
}

/*PutReplicationExecutionsIDUnsupportedMediaType handles this case with default header values.

The Media Type of the request is not supported, it has to be "application/json"
*/
type PutReplicationExecutionsIDUnsupportedMediaType struct {
}

func (o *PutReplicationExecutionsIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /replication/executions/{id}][%d] putReplicationExecutionsIdUnsupportedMediaType ", 415)
}

func (o *PutReplicationExecutionsIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutReplicationExecutionsIDInternalServerError creates a PutReplicationExecutionsIDInternalServerError with default headers values
func NewPutReplicationExecutionsIDInternalServerError() *PutReplicationExecutionsIDInternalServerError {
	return &PutReplicationExecutionsIDInternalServerError{}
}

/*PutReplicationExecutionsIDInternalServerError handles this case with default header values.

Unexpected internal errors.
*/
type PutReplicationExecutionsIDInternalServerError struct {
}

func (o *PutReplicationExecutionsIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /replication/executions/{id}][%d] putReplicationExecutionsIdInternalServerError ", 500)
}

func (o *PutReplicationExecutionsIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
