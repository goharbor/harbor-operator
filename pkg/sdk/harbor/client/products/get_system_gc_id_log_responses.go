// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetSystemGcIDLogReader is a Reader for the GetSystemGcIDLog structure.
type GetSystemGcIDLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSystemGcIDLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSystemGcIDLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSystemGcIDLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSystemGcIDLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSystemGcIDLogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSystemGcIDLogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSystemGcIDLogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSystemGcIDLogOK creates a GetSystemGcIDLogOK with default headers values
func NewGetSystemGcIDLogOK() *GetSystemGcIDLogOK {
	return &GetSystemGcIDLogOK{}
}

/*GetSystemGcIDLogOK handles this case with default header values.

Get successfully.
*/
type GetSystemGcIDLogOK struct {
	Payload string
}

func (o *GetSystemGcIDLogOK) Error() string {
	return fmt.Sprintf("[GET /system/gc/{id}/log][%d] getSystemGcIdLogOK  %+v", 200, o.Payload)
}

func (o *GetSystemGcIDLogOK) GetPayload() string {
	return o.Payload
}

func (o *GetSystemGcIDLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSystemGcIDLogBadRequest creates a GetSystemGcIDLogBadRequest with default headers values
func NewGetSystemGcIDLogBadRequest() *GetSystemGcIDLogBadRequest {
	return &GetSystemGcIDLogBadRequest{}
}

/*GetSystemGcIDLogBadRequest handles this case with default header values.

Illegal format of provided ID value.
*/
type GetSystemGcIDLogBadRequest struct {
}

func (o *GetSystemGcIDLogBadRequest) Error() string {
	return fmt.Sprintf("[GET /system/gc/{id}/log][%d] getSystemGcIdLogBadRequest ", 400)
}

func (o *GetSystemGcIDLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSystemGcIDLogUnauthorized creates a GetSystemGcIDLogUnauthorized with default headers values
func NewGetSystemGcIDLogUnauthorized() *GetSystemGcIDLogUnauthorized {
	return &GetSystemGcIDLogUnauthorized{}
}

/*GetSystemGcIDLogUnauthorized handles this case with default header values.

User need to log in first.
*/
type GetSystemGcIDLogUnauthorized struct {
}

func (o *GetSystemGcIDLogUnauthorized) Error() string {
	return fmt.Sprintf("[GET /system/gc/{id}/log][%d] getSystemGcIdLogUnauthorized ", 401)
}

func (o *GetSystemGcIDLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSystemGcIDLogForbidden creates a GetSystemGcIDLogForbidden with default headers values
func NewGetSystemGcIDLogForbidden() *GetSystemGcIDLogForbidden {
	return &GetSystemGcIDLogForbidden{}
}

/*GetSystemGcIDLogForbidden handles this case with default header values.

User does not have permission of admin role.
*/
type GetSystemGcIDLogForbidden struct {
}

func (o *GetSystemGcIDLogForbidden) Error() string {
	return fmt.Sprintf("[GET /system/gc/{id}/log][%d] getSystemGcIdLogForbidden ", 403)
}

func (o *GetSystemGcIDLogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSystemGcIDLogNotFound creates a GetSystemGcIDLogNotFound with default headers values
func NewGetSystemGcIDLogNotFound() *GetSystemGcIDLogNotFound {
	return &GetSystemGcIDLogNotFound{}
}

/*GetSystemGcIDLogNotFound handles this case with default header values.

The specific gc ID's log does not exist.
*/
type GetSystemGcIDLogNotFound struct {
}

func (o *GetSystemGcIDLogNotFound) Error() string {
	return fmt.Sprintf("[GET /system/gc/{id}/log][%d] getSystemGcIdLogNotFound ", 404)
}

func (o *GetSystemGcIDLogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSystemGcIDLogInternalServerError creates a GetSystemGcIDLogInternalServerError with default headers values
func NewGetSystemGcIDLogInternalServerError() *GetSystemGcIDLogInternalServerError {
	return &GetSystemGcIDLogInternalServerError{}
}

/*GetSystemGcIDLogInternalServerError handles this case with default header values.

Unexpected internal errors.
*/
type GetSystemGcIDLogInternalServerError struct {
}

func (o *GetSystemGcIDLogInternalServerError) Error() string {
	return fmt.Sprintf("[GET /system/gc/{id}/log][%d] getSystemGcIdLogInternalServerError ", 500)
}

func (o *GetSystemGcIDLogInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
